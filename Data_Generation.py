from langchain.chains import RetrievalQA
from langchain_ollama import OllamaLLM as Ollama  # ‚úÖ Mise √† jour
from Data_Indexing_Storage import load_faiss_index
import json
import os


# ‚õìÔ∏è Cr√©ation de la cha√Æne RAG avec FAISS et Ollama
def get_rag_chain():
    vectorstore = load_faiss_index("faiss_index")
    retriever = vectorstore.as_retriever()

    llm = Ollama(model="llama3.2:1b")
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=retriever,
        chain_type="stuff",
        return_source_documents=True
    )

    return qa_chain, llm  # ‚úÖ On retourne deux objets



# üí¨ G√©n√©ration d'une r√©ponse enrichie √† partir du contexte + question
def generate_answer_with_context(llm, context, question):

    full_prompt = f"""
Tu es un assistant sp√©cialis√© en optimisation des achats. En te basant sur les donn√©es ci-dessous, r√©ponds clairement √† la question de l'utilisateur.

Donn√©es :
{context}

Question :
{question}

üìù Inclue dans ta r√©ponse si possible :
- Score global
- Taux de conformit√©
- Taux de respect des d√©lais
- Cat√©gorie (fiable, moyen, risqu√©)
- Co√ªt unitaire
"""
    response = llm.invoke(full_prompt)
    return response



# üü© 1. Initialise liste vide fi d√©but mta3 __main__ # Save pour RAGAS
data = []

if __name__ == "__main__":
    # ‚úÖ Correction ici : on s√©pare les deux objets
    qa_chain, llm = get_rag_chain()

    user_question = "Quel est le meilleur fournisseur le plus fiable pour les articles de type Mat√©riel ?"
    result = qa_chain.invoke({"query": user_question})

    # ‚úÖ On extrait les documents sources
    context = "\n\n".join([doc.page_content for doc in result['source_documents']])

    # ‚úÖ R√©utilisation du LLM pour le prompt enrichi
    final_answer = generate_answer_with_context(llm, context, user_question)

    print("üí¨ R√©ponse enrichie :\n", final_answer)

 # üü© 2. Ajoute les donn√©es √† la liste # Save pour RAGAS
    data.append({
        "question": user_question,
        "context": context,
        "answer": final_answer
    })

    print("Donn√©es ajout√©es √† la liste:", data)  # Debug pour v√©rifier les donn√©es ajout√©es

    # üü© 3. V√©rifie si le fichier existe d√©j√† # Save pour RAGAS
    if os.path.exists("evaluation_data.json"):
        print("Le fichier 'evaluation_data.json' existe d√©j√†.")
    else:
        print("Le fichier 'evaluation_data.json' n'existe pas encore.")

    # üü© 4. √âcris les r√©sultats dans un fichier JSON # Save pour RAGAS
    try:
        with open("evaluation_data.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("Fichier 'evaluation_data.json' sauvegard√© avec succ√®s.")
    except Exception as e:
        print(f"Erreur lors de l'√©criture dans le fichier: {e}")